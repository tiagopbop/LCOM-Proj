#include <lcom/lcf.h>
#include <stdint.h>

#include "serialport.h"
#include "queue.h"

/**
 * @file serialport.h
 * @brief Functions for handling serial port operations and interrupts.
 */

extern int hook_id_sp; /**< Hook ID for serial port interrupts */
static Queue * queue; /**< Queue to store serial port data */

/**
 * @brief Subscribes serial port interrupts.
 *
 * @param bitno Pointer to store the bit number to be set in the mask returned upon an interrupt.
 * @return 0 on success, non-zero otherwise.
 */
int serialport_subscribe_int(uint8_t* bitno);

/**
 * @brief Unsubscribes serial port interrupts.
 *
 * @return 0 on success, non-zero otherwise.
 */
int serialport_unsubscribe_int();

/**
 * @brief Clears serial port interrupts.
 *
 * @return 0 on success, non-zero otherwise.
 */
int serialport_clearInterrupts();

/**
 * @brief Serial port interrupt handler.
 *
 * Handles the interrupts generated by the serial port.
 */
void serialport_ih();

/**
 * @brief Initializes the serial port.
 */
void serialport_init();

/**
 * @brief Deletes the serial port configuration.
 */
void delete_serialport();

/**
 * @brief Gets the current status of the serial port.
 *
 * @param status Pointer to store the current status.
 * @return 0 on success, non-zero otherwise.
 */
int serialport_getStats(uint8_t* status);

/**
 * @brief Reads a byte from the serial port.
 *
 * @return The byte read from the serial port.
 */
int read_byte();

/**
 * @brief Sends a byte through the serial port.
 *
 * @param byte The byte to be sent.
 * @return 0 on success, non-zero otherwise.
 */
int send_byte(uint8_t byte);

/**
 * @brief Gets the queue used for serial port data.
 *
 * @return Pointer to the queue.
 */
Queue* get_Queue();

/**
 * @brief Adds a byte of data to the queue.
 *
 * @param data The byte of data to be added.
 */
void addToQueue(uint8_t data);
